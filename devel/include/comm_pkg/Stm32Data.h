// Generated by gencpp from file comm_pkg/Stm32Data.msg
// DO NOT EDIT!


#ifndef COMM_PKG_MESSAGE_STM32DATA_H
#define COMM_PKG_MESSAGE_STM32DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace comm_pkg
{
template <class ContainerAllocator>
struct Stm32Data_
{
  typedef Stm32Data_<ContainerAllocator> Type;

  Stm32Data_()
    : adc(0)
    , button(0)  {
    }
  Stm32Data_(const ContainerAllocator& _alloc)
    : adc(0)
    , button(0)  {
  (void)_alloc;
    }



   typedef int32_t _adc_type;
  _adc_type adc;

   typedef uint8_t _button_type;
  _button_type button;





  typedef boost::shared_ptr< ::comm_pkg::Stm32Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comm_pkg::Stm32Data_<ContainerAllocator> const> ConstPtr;

}; // struct Stm32Data_

typedef ::comm_pkg::Stm32Data_<std::allocator<void> > Stm32Data;

typedef boost::shared_ptr< ::comm_pkg::Stm32Data > Stm32DataPtr;
typedef boost::shared_ptr< ::comm_pkg::Stm32Data const> Stm32DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comm_pkg::Stm32Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comm_pkg::Stm32Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comm_pkg::Stm32Data_<ContainerAllocator1> & lhs, const ::comm_pkg::Stm32Data_<ContainerAllocator2> & rhs)
{
  return lhs.adc == rhs.adc &&
    lhs.button == rhs.button;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comm_pkg::Stm32Data_<ContainerAllocator1> & lhs, const ::comm_pkg::Stm32Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comm_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::comm_pkg::Stm32Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm_pkg::Stm32Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_pkg::Stm32Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_pkg::Stm32Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_pkg::Stm32Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_pkg::Stm32Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comm_pkg::Stm32Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fac1e529e3bbd879b45ff052f485b18";
  }

  static const char* value(const ::comm_pkg::Stm32Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fac1e529e3bbd87ULL;
  static const uint64_t static_value2 = 0x9b45ff052f485b18ULL;
};

template<class ContainerAllocator>
struct DataType< ::comm_pkg::Stm32Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm_pkg/Stm32Data";
  }

  static const char* value(const ::comm_pkg::Stm32Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comm_pkg::Stm32Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 adc\n"
"uint8 button\n"
;
  }

  static const char* value(const ::comm_pkg::Stm32Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comm_pkg::Stm32Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.adc);
      stream.next(m.button);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Stm32Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comm_pkg::Stm32Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comm_pkg::Stm32Data_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "adc: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adc);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMM_PKG_MESSAGE_STM32DATA_H
